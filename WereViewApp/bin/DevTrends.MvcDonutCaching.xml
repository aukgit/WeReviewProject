<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DevTrends.MvcDonutCaching</name>
    </assembly>
    <members>
        <member name="P:DevTrends.MvcDonutCaching.ActionSettings.ActionName">
            <summary>
            Gets or sets the action name.
            </summary>
            <value>
            The action's name.
            </value>
        </member>
        <member name="P:DevTrends.MvcDonutCaching.ActionSettings.ControllerName">
            <summary>
            Gets or sets the controller name.
            </summary>
            <value>
            The the controller name.
            </value>
        </member>
        <member name="P:DevTrends.MvcDonutCaching.ActionSettings.RouteValues">
            <summary>
            Gets or sets the route values.
            </summary>
            <value>
            The route values.
            </value>
        </member>
        <member name="M:DevTrends.MvcDonutCaching.IActionSettingsSerialiser.Serialise(DevTrends.MvcDonutCaching.ActionSettings)">
            <summary>
            Implementations should serialize as string the specified action settings.
            </summary>
            <param name="actionSettings">The action settings.</param>
            <returns>A string representing the given <see cref="!:actionSettings"/></returns>
        </member>
        <member name="M:DevTrends.MvcDonutCaching.IActionSettingsSerialiser.Deserialise(System.String)">
            <summary>
            Implementations should deserializes the specified serialized action settings.
            </summary>
            <param name="serialisedActionSettings">The serialized action settings.</param>
            <returns>An <see cref="T:DevTrends.MvcDonutCaching.ActionSettings"/> object</returns>
        </member>
        <member name="M:DevTrends.MvcDonutCaching.ICacheHeadersHelper.SetCacheHeaders(System.Web.HttpResponseBase,DevTrends.MvcDonutCaching.CacheSettings)">
            <summary>
            Implementations should set the cache headers for the HTTP response given <see cref="!:settings"/>.
            </summary>
            <param name="response">The HTTP response.</param>
            <param name="settings">The cache settings.</param>
        </member>
        <member name="M:DevTrends.MvcDonutCaching.CacheHeadersHelper.SetCacheHeaders(System.Web.HttpResponseBase,DevTrends.MvcDonutCaching.CacheSettings)">
            <summary>
            Sets the cache headers for the HTTP response given <see cref="!:settings"/>.
            </summary>
            <param name="response">The HTTP response.</param>
            <param name="settings">The cache settings.</param>
        </member>
        <member name="P:DevTrends.MvcDonutCaching.CacheItem.ContentType">
            <summary>
            Gets or sets content type.
            </summary>
            <value>
            The content type.
            </value>
        </member>
        <member name="P:DevTrends.MvcDonutCaching.CacheItem.Content">
            <summary>
            Gets or sets the content to be cached.
            </summary>
            <value>
            The content.
            </value>
        </member>
        <member name="P:DevTrends.MvcDonutCaching.CacheSettings.IsCachingEnabled">
            <summary>
            Gets or sets a value indicating whether the cache is enabled.
            </summary>
            <value>
              <c>true</c> if cache is enabled otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DevTrends.MvcDonutCaching.CacheSettings.Duration">
            <summary>
            Gets or sets the cache duration.
            </summary>
            <value>
            The cache duration.
            </value>
        </member>
        <member name="P:DevTrends.MvcDonutCaching.CacheSettings.VaryByParam">
            <summary>
            Gets or sets the VaryByParam cache parameter.
            </summary>
            <value>
            The VaryByParam cache parameter.
            </value>
        </member>
        <member name="P:DevTrends.MvcDonutCaching.CacheSettings.VaryByCustom">
            <summary>
            Gets or sets the VaryByCustom cache parameter.
            </summary>
            <value>
            The VaryByCustom cache parameter.
            </value>
        </member>
        <member name="P:DevTrends.MvcDonutCaching.CacheSettings.Location">
            <summary>
            Gets or sets the output cache location.
            </summary>
            <value>
            The output cache location.
            </value>
        </member>
        <member name="P:DevTrends.MvcDonutCaching.CacheSettings.NoStore">
            <summary>
            Gets or sets a value indicating whether store or not the result.
            </summary>
            <value>
              <c>true</c> if no store; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DevTrends.MvcDonutCaching.CacheSettings.Options">
            <summary>
            Gets or sets the output cache options.
            </summary>
            <value>
            The output cache options.
            </value>
        </member>
        <member name="P:DevTrends.MvcDonutCaching.CacheSettings.IsServerCachingEnabled">
            <summary>
            Gets a value indicating whether the server caching is enabled.
            </summary>
            <value>
            <c>true</c> if the server caching enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:DevTrends.MvcDonutCaching.ICacheSettingsManager.RetrieveOutputCacheProviderSettings">
            <summary>
            Implementations should return the output cache provider settings.
            </summary>
            <returns>A <see cref="T:System.Configuration.ProviderSettings"/> instance.</returns>
        </member>
        <member name="M:DevTrends.MvcDonutCaching.ICacheSettingsManager.RetrieveOutputCacheProfile(System.String)">
            <summary>
            Implementation should return an output cache profile for the asked <see cref="!:cacheProfileName"/>.
            </summary>
            <param name="cacheProfileName">Name of the cache profile.</param>
            <returns>A <see cref="T:System.Web.Configuration.OutputCacheProfile"/> instance.</returns>
        </member>
        <member name="P:DevTrends.MvcDonutCaching.ICacheSettingsManager.IsCachingEnabledGlobally">
            <summary>
            Implementation should return a value indicating whether caching is globally enabled.
            </summary>
            <value>
            <c>true</c> if caching is globally enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:DevTrends.MvcDonutCaching.IEncryptor.Encrypt(System.String)">
            <summary>
            Implementations should encrypt the specified plain text.
            </summary>
            <param name="plainText">The plain text.</param>
            <returns>An encrypted representation of <see cref="!:plainText"/></returns>
        </member>
        <member name="M:DevTrends.MvcDonutCaching.IEncryptor.Decrypt(System.String)">
            <summary>
            Implementations should Decrypt the specified encrypted text.
            </summary>
            <param name="encryptedText">The encrypted text.</param>
            <returns>The original text</returns>
        </member>
        <member name="M:DevTrends.MvcDonutCaching.IOutputCacheManager.RemoveItem(System.String,System.String)">
            <summary>
            Implementations should remove a single output cache entry for the specified controller and action.
            </summary>
            <param name="controllerName">The name of the controller that contains the action method.</param>
            <param name="actionName">The name of the controller action method.</param>
        </member>
        <member name="M:DevTrends.MvcDonutCaching.IOutputCacheManager.RemoveItem(System.String,System.String,System.Object)">
            <summary>
            Implementations should remove a single output cache entry for the specified controller, action and parameters.
            </summary>
            <param name="controllerName">The name of the controller that contains the action method.</param>
            <param name="actionName">The name of the controller action method.</param>
            <param name="routeValues">An object that contains the parameters for a route.</param>
        </member>
        <member name="M:DevTrends.MvcDonutCaching.IOutputCacheManager.RemoveItem(System.String,System.String,System.Web.Routing.RouteValueDictionary)">
            <summary>
            Implementations should remove a single output cache entry for the specified controller, action and parameters.
            </summary>
            <param name="controllerName">The name of the controller that contains the action method.</param>
            <param name="actionName">The name of the controller action method.</param>
            <param name="routeValues">A dictionary that contains the parameters for a route.</param>
        </member>
        <member name="M:DevTrends.MvcDonutCaching.IOutputCacheManager.RemoveItems">
            <summary>
            Implementations should remove all output cache entries.
            </summary>
        </member>
        <member name="M:DevTrends.MvcDonutCaching.IOutputCacheManager.RemoveItems(System.String)">
            <summary>
            Implementations should remove all output cache entries for the specified controller.
            </summary>
            <param name="controllerName">The name of the controller.</param>
        </member>
        <member name="M:DevTrends.MvcDonutCaching.IOutputCacheManager.RemoveItems(System.String,System.String)">
            <summary>
            Implementations should remove all output cache entries for the specified controller and action.
            </summary>
            <param name="controllerName">The name of the controller that contains the action method.</param>
            <param name="actionName">The name of the controller action method.</param>
        </member>
        <member name="M:DevTrends.MvcDonutCaching.IOutputCacheManager.RemoveItems(System.String,System.String,System.Web.Routing.RouteValueDictionary)">
            <summary>
            Implementations should remove all output cache entries for the specified controller, action and parameters.
            </summary>
            <param name="controllerName">The name of the controller that contains the action method.</param>
            <param name="actionName">The name of the controller action method.</param>
            <param name="routeValues">A dictionary that contains the parameters for a route.</param>
        </member>
        <member name="M:DevTrends.MvcDonutCaching.IReadWriteOutputCacheManager.AddItem(System.String,DevTrends.MvcDonutCaching.CacheItem,System.DateTime)">
            <summary>
            Implementations should add the given <see cref="!:cacheItem"/> in the cache.
            </summary>
            <param name="key">The cache key to add.</param>
            <param name="cacheItem">The cache item to add.</param>
            <param name="utcExpiry">The cache item UTC expiry date and time.</param>
        </member>
        <member name="M:DevTrends.MvcDonutCaching.IReadWriteOutputCacheManager.GetItem(System.String)">
            <summary>
            Implementations should retrieve a cache item the given the <see cref="!:key"/>.
            </summary>
            <param name="key">The key.</param>
            <returns>A <see cref="T:DevTrends.MvcDonutCaching.CacheItem"/> instance on cache hit, null otherwise.</returns>
        </member>
        <member name="M:DevTrends.MvcDonutCaching.IDonutHoleFiller.RemoveDonutHoleWrappers(System.String,System.Web.Mvc.ControllerContext,DevTrends.MvcDonutCaching.OutputCacheOptions)">
            <summary>
            Implentations should remove the donut hole wrappers.
            </summary>
            <param name="content">The content.</param>
            <param name="filterContext">The filter context.</param>
            <param name="options">The output cache options.</param>
            <returns>A donut hole wrapper free string</returns>
        </member>
        <member name="M:DevTrends.MvcDonutCaching.IDonutHoleFiller.ReplaceDonutHoleContent(System.String,System.Web.Mvc.ControllerContext,DevTrends.MvcDonutCaching.OutputCacheOptions)">
            <summary>
            Replaces the donut holes content of with fresh content.
            </summary>
            <param name="content">The content.</param>
            <param name="filterContext">The filter context.</param>
            <param name="options">The output cache options.</param>
            <returns>A string containing the donut holes replaced by content.</returns>
        </member>
        <member name="M:DevTrends.MvcDonutCaching.IKeyGenerator.GenerateKey(System.Web.Mvc.ControllerContext,DevTrends.MvcDonutCaching.CacheSettings)">
            <summary>
            Implementations should generate a key given the <see cref="!:context"/> and <see cref="!:cacheSettings"/>.
            </summary>
            <param name="context">The controller context.</param>
            <param name="cacheSettings">The cache settings.</param>
            <returns>A string that can be used as an output cache key</returns>
        </member>
        <member name="M:DevTrends.MvcDonutCaching.DonutOutputCacheAttribute.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
            <summary>
            Called before an action method executes.
            </summary>
            <param name="filterContext">The filter context.</param>
        </member>
        <member name="M:DevTrends.MvcDonutCaching.DonutOutputCacheAttribute.OnResultExecuted(System.Web.Mvc.ResultExecutedContext)">
            <summary>
            Called after an action result executes.
            </summary>
            <param name="filterContext">The filter context.</param>
        </member>
        <member name="M:DevTrends.MvcDonutCaching.DonutOutputCacheAttribute.BuildCacheSettings">
            <summary>
            Builds the cache settings.
            </summary>
            <returns></returns>
            <exception cref="T:System.Web.HttpException">
            The 'duration' attribute must have a value that is greater than or equal to zero.
            </exception>
        </member>
        <member name="M:DevTrends.MvcDonutCaching.DonutOutputCacheAttribute.ExecuteCallback(System.Web.Mvc.ControllerContext,System.Boolean)">
            <summary>
            Executes the callback.
            </summary>
            <param name="context">The context.</param>
            <param name="hasErrors">if set to <c>true</c> [has errors].</param>
        </member>
        <member name="P:DevTrends.MvcDonutCaching.DonutOutputCacheAttribute.Duration">
            <summary>
            Gets or sets the cache duration, in seconds.
            </summary>
        </member>
        <member name="P:DevTrends.MvcDonutCaching.DonutOutputCacheAttribute.VaryByParam">
            <summary>
            Gets or sets the vary-by-param value.
            </summary>
        </member>
        <member name="P:DevTrends.MvcDonutCaching.DonutOutputCacheAttribute.VaryByCustom">
            <summary>
            Gets or sets the vary-by-custom value.
            </summary>
        </member>
        <member name="P:DevTrends.MvcDonutCaching.DonutOutputCacheAttribute.CacheProfile">
            <summary>
            Gets or sets the cache profile name.
            </summary>
        </member>
        <member name="P:DevTrends.MvcDonutCaching.DonutOutputCacheAttribute.Location">
            <summary>
            Gets or sets the location.
            </summary>
        </member>
        <member name="P:DevTrends.MvcDonutCaching.DonutOutputCacheAttribute.NoStore">
            <summary>
            Gets or sets a value that indicates whether to store the cache.
            </summary>
        </member>
        <member name="P:DevTrends.MvcDonutCaching.DonutOutputCacheAttribute.Options">
            <summary>
            Get or sets the <see cref="T:DevTrends.MvcDonutCaching.OutputCacheOptions"/> for this attributes. Specifying a value here will
            make the <see cref="P:DevTrends.MvcDonutCaching.OutputCache.DefaultOptions"/> value ignored.
            </summary>
        </member>
        <member name="M:DevTrends.MvcDonutCaching.HtmlHelperExtensions.Action(System.Web.Mvc.HtmlHelper,System.String,System.Boolean)">
            <summary>
            Invokes the specified child action method and returns the result as an HTML string.
            </summary>
            <param name="htmlHelper">The HTML helper instance that this method extends.</param>
            <param name="actionName">The name of the action method to invoke.</param>
            <param name="excludeFromParentCache">A flag that determines whether the action should be excluded from any parent cache.</param>
            <returns>The child action result as an HTML string.</returns>
        </member>
        <member name="M:DevTrends.MvcDonutCaching.HtmlHelperExtensions.Action(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Boolean)">
            <summary>
            Invokes the specified child action method using the specified parameters and returns the result as an HTML string.
            </summary>
            <param name="htmlHelper">The HTML helper instance that this method extends.</param>
            <param name="actionName">The name of the action method to invoke.</param>
            <param name="routeValues">An object that contains the parameters for a route. You can use routeValues to provide the parameters that are bound to the action method parameters. The routeValues parameter is merged with the original route values and overrides them.</param>
            <param name="excludeFromParentCache">A flag that determines whether the action should be excluded from any parent cache.</param>
            <returns>The child action result as an HTML string.</returns>
        </member>
        <member name="M:DevTrends.MvcDonutCaching.HtmlHelperExtensions.Action(System.Web.Mvc.HtmlHelper,System.String,System.Web.Routing.RouteValueDictionary,System.Boolean)">
            <summary>
            Invokes the specified child action method using the specified parameters and returns the result as an HTML string.
            </summary>
            <param name="htmlHelper">The HTML helper instance that this method extends.</param>
            <param name="actionName">The name of the action method to invoke.</param>
            <param name="routeValues">A dictionary that contains the parameters for a route. You can use routeValues to provide the parameters that are bound to the action method parameters. The routeValues parameter is merged with the original route values and overrides them.</param>
            <param name="excludeFromParentCache">A flag that determines whether the action should be excluded from any parent cache.</param>
            <returns>The child action result as an HTML string.</returns>
        </member>
        <member name="M:DevTrends.MvcDonutCaching.HtmlHelperExtensions.Action(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Boolean)">
            <summary>
            Invokes the specified child action method using the specified parameters and controller name and returns the result as an HTML string.
            </summary>
            <param name="htmlHelper">The HTML helper instance that this method extends.</param>
            <param name="actionName">The name of the action method to invoke.</param>
            <param name="controllerName">The name of the controller that contains the action method.</param>
            <param name="excludeFromParentCache">A flag that determines whether the action should be excluded from any parent cache.</param>
            <returns>The child action result as an HTML string.</returns>
        </member>
        <member name="M:DevTrends.MvcDonutCaching.HtmlHelperExtensions.Action(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object,System.Boolean)">
            <summary>
            Invokes the specified child action method using the specified parameters and controller name and returns the result as an HTML string.
            </summary>
            <param name="htmlHelper">The HTML helper instance that this method extends.</param>
            <param name="actionName">The name of the action method to invoke.</param>
            <param name="controllerName">The name of the controller that contains the action method.</param>
            <param name="routeValues">An object that contains the parameters for a route. You can use routeValues to provide the parameters that are bound to the action method parameters. The routeValues parameter is merged with the original route values and overrides them.</param>
            <param name="excludeFromParentCache">A flag that determines whether the action should be excluded from any parent cache.</param>
            <returns>The child action result as an HTML string.</returns>
        </member>
        <member name="M:DevTrends.MvcDonutCaching.HtmlHelperExtensions.RenderAction(System.Web.Mvc.HtmlHelper,System.String,System.Boolean)">
            <summary>
            Invokes the specified child action method using the specified parameters and controller name and renders the result inline in the parent view.
            </summary>
            <param name="htmlHelper">The HTML helper instance that this method extends.</param>
            <param name="actionName">The name of the child action method to invoke.</param>
            <param name="excludeFromParentCache">A flag that determines whether the action should be excluded from any parent cache.</param>
        </member>
        <member name="M:DevTrends.MvcDonutCaching.HtmlHelperExtensions.RenderAction(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Boolean)">
            <summary>
            Invokes the specified child action method using the specified parameters and controller name and renders the result inline in the parent view.
            </summary>
            <param name="htmlHelper">The HTML helper instance that this method extends.</param>
            <param name="actionName">The name of the child action method to invoke.</param>
            <param name="routeValues">A dictionary that contains the parameters for a route. You can use routeValues to provide the parameters that are bound to the action method parameters. The routeValues parameter is merged with the original route values and overrides them.</param>
            <param name="excludeFromParentCache">A flag that determines whether the action should be excluded from any parent cache.</param>
        </member>
        <member name="M:DevTrends.MvcDonutCaching.HtmlHelperExtensions.RenderAction(System.Web.Mvc.HtmlHelper,System.String,System.Web.Routing.RouteValueDictionary,System.Boolean)">
            <summary>
            Invokes the specified child action method using the specified parameters and controller name and renders the result inline in the parent view.
            </summary>
            <param name="htmlHelper">The HTML helper instance that this method extends.</param>
            <param name="actionName">The name of the child action method to invoke.</param>
            <param name="routeValues">A dictionary that contains the parameters for a route. You can use routeValues to provide the parameters that are bound to the action method parameters. The routeValues parameter is merged with the original route values and overrides them.</param>
            <param name="excludeFromParentCache">A flag that determines whether the action should be excluded from any parent cache.</param>        
        </member>
        <member name="M:DevTrends.MvcDonutCaching.HtmlHelperExtensions.RenderAction(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Boolean)">
            <summary>
            Invokes the specified child action method using the specified parameters and controller name and renders the result inline in the parent view.
            </summary>
            <param name="htmlHelper">The HTML helper instance that this method extends.</param>
            <param name="actionName">The name of the child action method to invoke.</param>
            <param name="controllerName">The name of the controller that contains the action method.</param>
            <param name="excludeFromParentCache">A flag that determines whether the action should be excluded from any parent cache.</param>        
        </member>
        <member name="M:DevTrends.MvcDonutCaching.HtmlHelperExtensions.RenderAction(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object,System.Boolean)">
            <summary>
            Invokes the specified child action method using the specified parameters and controller name and renders the result inline in the parent view.
            </summary>
            <param name="htmlHelper">The HTML helper instance that this method extends.</param>
            <param name="actionName">The name of the child action method to invoke.</param>
            <param name="controllerName">The name of the controller that contains the action method.</param>
            <param name="routeValues">A dictionary that contains the parameters for a route. You can use routeValues to provide the parameters that are bound to the action method parameters. The routeValues parameter is merged with the original route values and overrides them.</param>
            <param name="excludeFromParentCache">A flag that determines whether the action should be excluded from any parent cache.</param>
        </member>
        <member name="M:DevTrends.MvcDonutCaching.HtmlHelperExtensions.RenderAction(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Boolean)">
            <summary>
            Invokes the specified child action method using the specified parameters and controller name and renders the result inline in the parent view.
            </summary>
            <param name="htmlHelper">The HTML helper instance that this method extends.</param>
            <param name="actionName">The name of the child action method to invoke.</param>
            <param name="controllerName">The name of the controller that contains the action method.</param>
            <param name="routeValues">A dictionary that contains the parameters for a route. You can use routeValues to provide the parameters that are bound to the action method parameters. The routeValues parameter is merged with the original route values and overrides them.</param>
            <param name="excludeFromParentCache">A flag that determines whether the action should be excluded from any parent cache.</param>
        </member>
        <member name="M:DevTrends.MvcDonutCaching.HtmlHelperExtensions.Action(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Boolean)">
            <summary>
            Invokes the specified child action method using the specified parameters and controller name and returns the result as an HTML string.
            </summary>
            <param name="htmlHelper">The HTML helper instance that this method extends.</param>
            <param name="actionName">The name of the action method to invoke.</param>
            <param name="controllerName">The name of the controller that contains the action method.</param>
            <param name="routeValues">A dictionary that contains the parameters for a route. You can use routeValues to provide the parameters that are bound to the action method parameters. The routeValues parameter is merged with the original route values and overrides them.</param>
            <param name="excludeFromParentCache">A flag that determines whether the action should be excluded from any parent cache.</param>
            <returns>The child action result as an HTML string.</returns>
        </member>
        <member name="M:DevTrends.MvcDonutCaching.IKeyBuilder.BuildKey(System.String)">
            <summary>
            Implementations should build a cache key given <see cref="!:controllerName"/>.
            </summary>
            <param name="controllerName">Name of the controller.</param>
            <returns></returns>
        </member>
        <member name="M:DevTrends.MvcDonutCaching.IKeyBuilder.BuildKey(System.String,System.String)">
            <summary>
            Implementations should build a cache key given the <see cref="!:controllerName"/> and <see cref="!:actionName"/>.
            </summary>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:DevTrends.MvcDonutCaching.IKeyBuilder.BuildKey(System.String,System.String,System.Web.Routing.RouteValueDictionary)">
            <summary>
            Builds a cache key given the <see cref="!:controllerName"/>, <see cref="!:actionName"/> and <see cref="!:routeValues"/>.
            </summary>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="routeValues">The route values.</param>
        </member>
        <member name="M:DevTrends.MvcDonutCaching.IKeyBuilder.BuildKeyFragment(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Implementations should build a cache key fragment for given <see cref="!:routeValue"/>.
            </summary>
            <param name="routeValue">The route value to process.</param>
        </member>
        <member name="P:DevTrends.MvcDonutCaching.OutputCache.DefaultOptions">
            <summary>
            Specifies the default value for the <see cref="P:DevTrends.MvcDonutCaching.DonutOutputCacheAttribute.Options"/>
            </summary>
        </member>
        <member name="M:DevTrends.MvcDonutCaching.OutputCacheManager.RemoveItem(System.String,System.String)">
            <summary>
            Removes a single output cache entry for the specified controller and action.
            </summary>
            <param name="controllerName">The name of the controller that contains the action method.</param>
            <param name="actionName">The name of the controller action method.</param>
        </member>
        <member name="M:DevTrends.MvcDonutCaching.OutputCacheManager.RemoveItem(System.String,System.String,System.Object)">
            <summary>
            Removes a single output cache entry for the specified controller, action and parameters.
            </summary>
            <param name="controllerName">The name of the controller that contains the action method.</param>
            <param name="actionName">The name of the controller action method.</param>
            <param name="routeValues">An object that contains the parameters for a route.</param>
        </member>
        <member name="M:DevTrends.MvcDonutCaching.OutputCacheManager.RemoveItem(System.String,System.String,System.Web.Routing.RouteValueDictionary)">
            <summary>
            Removes a single output cache entry for the specified controller, action and parameters.
            </summary>
            <param name="controllerName">The name of the controller that contains the action method.</param>
            <param name="actionName">The name of the controller action method.</param>
            <param name="routeValues">A dictionary that contains the parameters for a route.</param>
        </member>
        <member name="M:DevTrends.MvcDonutCaching.OutputCacheManager.RemoveItems">
            <summary>
            Removes all output cache entries.
            </summary>
        </member>
        <member name="M:DevTrends.MvcDonutCaching.OutputCacheManager.RemoveItems(System.String)">
            <summary>
            Removes all output cache entries for the specified controller.
            </summary>
            <param name="controllerName">The name of the controller.</param>
        </member>
        <member name="M:DevTrends.MvcDonutCaching.OutputCacheManager.RemoveItems(System.String,System.String)">
            <summary>
            Removes all output cache entries for the specified controller and action.
            </summary>
            <param name="controllerName">The name of the controller that contains the action method.</param>
            <param name="actionName">The name of the controller action method.</param>
        </member>
        <member name="M:DevTrends.MvcDonutCaching.OutputCacheManager.RemoveItems(System.String,System.String,System.Object)">
            <summary>
            Removes all output cache entries for the specified controller, action and parameters.
            </summary>
            <param name="controllerName">The name of the controller that contains the action method.</param>
            <param name="actionName">The name of the controller action method.</param>
            <param name="routeValues">An object that contains the parameters for a route.</param>
        </member>
        <member name="M:DevTrends.MvcDonutCaching.OutputCacheManager.RemoveItems(System.String,System.String,System.Web.Routing.RouteValueDictionary)">
            <summary>
            Removes all output cache entries for the specified controller, action and parameters.
            </summary>
            <param name="controllerName">The name of the controller that contains the action method.</param>
            <param name="actionName">The name of the controller action method.</param>
            <param name="routeValues">A dictionary that contains the parameters for a route.</param>
        </member>
        <member name="F:DevTrends.MvcDonutCaching.OutputCacheOptions.IgnoreQueryString">
            <summary>
            No matter what, never use the query string parameters to generate the cache key name
            </summary>
        </member>
        <member name="F:DevTrends.MvcDonutCaching.OutputCacheOptions.IgnoreFormData">
            <summary>
            No matter what, never use the POST data to generate the cache key name
            </summary>
        </member>
        <member name="F:DevTrends.MvcDonutCaching.OutputCacheOptions.NoCacheLookupForPosts">
            <summary>
            If the request is a POST, don't lookup for a cached result, execute the the result normally, 
            caching it for subsequent GET (or any other non POST verb).
            </summary>
        </member>
        <member name="F:DevTrends.MvcDonutCaching.OutputCacheOptions.ReplaceDonutsInChildActions">
            <summary>
            Replace donuts in child actions, may affect performance but needed if you intent to have nested
            donut holes in child actions
            </summary>
        </member>
        <member name="T:DevTrends.MvcDonutCaching.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage
            </summary>
            <example><code>
            [CanBeNull] public object Test() { return null; }
            public void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code></example>
        </member>
        <member name="T:DevTrends.MvcDonutCaching.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>
            </summary>
            <example><code>
            [NotNull] public object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code></example>
        </member>
        <member name="T:DevTrends.MvcDonutCaching.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>-like form
            </summary>
            <example><code>
            [StringFormatMethod("message")]
            public void ShowError(string message, params object[] args) { /* do something */ }
            public void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code></example>
        </member>
        <member name="M:DevTrends.MvcDonutCaching.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:DevTrends.MvcDonutCaching.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException"/>
            </summary>
            <example><code>
            public void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code></example>
        </member>
        <member name="T:DevTrends.MvcDonutCaching.Annotations.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface
             and this method is used to notify that some property value changed
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example><code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               private string _name;
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() =&gt; Property)</c></item>
             <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="T:DevTrends.MvcDonutCaching.Annotations.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted.<br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same)
            for method output means that the methos doesn't return normally.<br/>
            <c>canbenull</c> annotation is only applicable for output parameters.<br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row,
            or use single attribute with rows separated by semicolon.<br/>
            </syntax>
            <examples><list>
            <item><code>
            [ContractAnnotation("=> halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null => true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null, and not null if the parameter is not null
            [ContractAnnotation("null => null; notnull => notnull")]
            public object Transform(object data) 
            </code></item>
            <item><code>
            [ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list></examples>
        </member>
        <member name="T:DevTrends.MvcDonutCaching.Annotations.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not
            </summary>
            <example><code>
            [LocalizationRequiredAttribute(true)]
            public class Foo {
              private string str = "my string"; // Warning: Localizable string
            }
            </code></example>
        </member>
        <member name="T:DevTrends.MvcDonutCaching.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c>
            should be used instead. However, using '==' or '!=' for comparison
            with <c>null</c> is always permitted.
            </summary>
            <example><code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            class UsesNoEquality {
              public void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code></example>
        </member>
        <member name="T:DevTrends.MvcDonutCaching.Annotations.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            </summary>
            <example><code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            public class ComponentAttribute : Attribute { }
            [Component] // ComponentAttribute requires implementing IComponent interface
            public class MyComponent : IComponent { }
            </code></example>
        </member>
        <member name="T:DevTrends.MvcDonutCaching.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly
            (e.g. via reflection, in external library), so this symbol
            will not be marked as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="T:DevTrends.MvcDonutCaching.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper
            to not mark symbols marked with such attributes as unused
            (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:DevTrends.MvcDonutCaching.Annotations.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used</summary>
        </member>
        <member name="F:DevTrends.MvcDonutCaching.Annotations.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member</summary>
        </member>
        <member name="F:DevTrends.MvcDonutCaching.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:DevTrends.MvcDonutCaching.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type</summary>
        </member>
        <member name="T:DevTrends.MvcDonutCaching.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly
            when marked with <see cref="T:DevTrends.MvcDonutCaching.Annotations.MeansImplicitUseAttribute"/>
            or <see cref="T:DevTrends.MvcDonutCaching.Annotations.UsedImplicitlyAttribute"/>
            </summary>
        </member>
        <member name="F:DevTrends.MvcDonutCaching.Annotations.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used</summary>
        </member>
        <member name="F:DevTrends.MvcDonutCaching.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used</summary>
        </member>
        <member name="T:DevTrends.MvcDonutCaching.Annotations.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used
            </summary>
        </member>
        <member name="T:DevTrends.MvcDonutCaching.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled
            when the invoked method is on stack. If the parameter is a delegate,
            indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated
            while the method is executed
            </summary>
        </member>
        <member name="T:DevTrends.MvcDonutCaching.Annotations.PureAttribute">
            <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>
            </summary>
            <example><code>
            [Pure] private int Multiply(int x, int y) { return x * y; }
            public void Foo() {
              const int a = 2, b = 2;
              Multiply(a, b); // Waring: Return value of pure method is not used
            }
            </code></example>
        </member>
        <member name="T:DevTrends.MvcDonutCaching.Annotations.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder
            within a web project. Path can be relative or absolute,
            starting from web root (~)
            </summary>
        </member>
        <member name="T:DevTrends.MvcDonutCaching.Annotations.AspMvcActionAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC action. If applied to a method, the MVC action name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:DevTrends.MvcDonutCaching.Annotations.AspMvcAreaAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:DevTrends.MvcDonutCaching.Annotations.AspMvcControllerAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that
            the parameter is an MVC controller. If applied to a method,
            the MVC controller name is calculated implicitly from the context.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>
            </summary>
        </member>
        <member name="T:DevTrends.MvcDonutCaching.Annotations.AspMvcMasterAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC Master.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(String, String)</c>
            </summary>
        </member>
        <member name="T:DevTrends.MvcDonutCaching.Annotations.AspMvcModelTypeAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(String, Object)</c>
            </summary>
        </member>
        <member name="T:DevTrends.MvcDonutCaching.Annotations.AspMvcPartialViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that
            the parameter is an MVC partial view. If applied to a method,
            the MVC partial view name is calculated implicitly from the context.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:DevTrends.MvcDonutCaching.Annotations.AspMvcSupressViewErrorAttribute">
            <summary>
            ASP.NET MVC attribute. Allows disabling all inspections
            for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:DevTrends.MvcDonutCaching.Annotations.AspMvcDisplayTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:DevTrends.MvcDonutCaching.Annotations.AspMvcEditorTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:DevTrends.MvcDonutCaching.Annotations.AspMvcTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
            Use this attribute for custom wrappers similar to
            <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>
            </summary>
        </member>
        <member name="T:DevTrends.MvcDonutCaching.Annotations.AspMvcViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view. If applied to a method, the MVC view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(Object)</c>
            </summary>
        </member>
        <member name="T:DevTrends.MvcDonutCaching.Annotations.AspMvcActionSelectorAttribute">
            <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name
            </summary>
            <example><code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code></example>
        </member>
        <member name="T:DevTrends.MvcDonutCaching.Annotations.RazorSectionAttribute">
            <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>
            </summary>
        </member>
    </members>
</doc>
