@model object
@{
    var isRequired = ViewData.ModelMetadata.IsRequired;
    string isRequiredStar = isRequired ? "*" : "",
        prop = ViewData.ModelMetadata.PropertyName.ToString(),
        propLower = prop.ToLower(),
        styleProperty = propLower,
        displayName = ViewData.ModelMetadata.DisplayName ?? ViewData.ModelMetadata.PropertyName,
        description = ViewData.ModelMetadata.Description,
        templateName = ViewBag.type ?? "any";

    var htmlAttributes = new RouteValueDictionary();
    EditorTemplate.CommonTemplateAssignments(templateName, "any-type", ViewBag, ref htmlAttributes);
}
<div class="form-group form-row @styleProperty @templateName-type" data-type="@templateName" data-prop="@styleProperty">
    <div class="controls dev-plugin">
        <label class="@ViewBag.labelColumn control-label form-label @styleProperty" for="@styleProperty" data-prop="@styleProperty">
            @displayName
            <span class="red">@isRequiredStar</span>
        </label>
        <div class="@ViewBag.textColumn form-input @styleProperty" data-prop="@styleProperty">
            <div class="input-validator-container">
                @Html.TextBox("", ViewData.TemplateInfo.FormattedModelValue, htmlAttributes)
                <div class="validator-container">
                    <div class="validator-container">
                        <div class="validator"></div>
                    </div>
                </div>
            </div>
            @if (description != null) {
                <a data-toggle="tooltip" data-original-title="@description" title="@description" class="tooltip-show">
                    <span class="description-icon"></span>
                </a>
            }
            @Html.ValidationMessageFor(m => m, null, new { @class = "invalid-input" })
        </div>
    </div>
</div>
