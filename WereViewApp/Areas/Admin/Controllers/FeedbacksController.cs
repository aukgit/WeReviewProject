using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Linq.Expressions;
using System.Net;
using System.Web;
using System.Web.Mvc;
using DevTrends.MvcDonutCaching;
using WereViewApp.Controllers;
//using DevTrends.MvcDonutCaching;
using WereViewApp.Models.Context;
using WereViewApp.Models.POCO.IdentityCustomization;
using DevMvcComponent.Pagination;
namespace WereViewApp.Areas.Admin.Controllers
{
    public class FeedbacksController : IndentityController<ApplicationDbContext> {

		#region Developer Comments - Alim Ul karim
        /*
         *  Generated by Alim Ul Karim on behalf of Developers Organism.
         *  Find us developers-organism.com
         *  https://fb.com/DevelopersOrganism
         *  mailto:alim@developers-organism.com	
         *  Google 'https://www.google.com.bd/search?q=Alim-ul-karim'
         *  First Written : 23 March 2014
         *  Modified      : 03 March 2015
         * * */
		#endregion

		#region Constants and variables

		const string DeletedError = "Sorry for the inconvenience, last record is not removed. Please be in touch with admin.";
		const string DeletedSaved = "Removed successfully.";
		const string EditedSaved = "Modified successfully.";
		const string EditedError = "Sorry for the inconvenience, transaction is failed to save into the database. Please be in touch with admin.";
		const string CreatedError = "Sorry for the inconvenience, couldn't create the last transaction record.";
		const string CreatedSaved = "Transaction is successfully added to the database.";
		const string ControllerName = "Feedbacks";
		///Constant value for where the controller is actually visible.
		const string ControllerVisibleUrl = "/Admin/Feedbacks/";
        const string CurrentControllerRemoveOutputCacheUrl = "/Partials/GetFeedbackID";
        const string DynamicLoadPartialController = "/Partials/";
        bool DropDownDynamic = true;
		#endregion

		#region Enums

		internal enum ViewStates {
            Index,
            Create,
            CreatePostBefore,
            CreatePostAfter,
            Edit,
            EditPostBefore,
            EditPostAfter,
            Details,
            Delete,
            DeletePost
        }

		#endregion

		#region Constructors
		
		public FeedbacksController(): base(true){
			ViewBag.controller = ControllerName;
            ViewBag.visibleUrl = ControllerVisibleUrl;
            ViewBag.dropDownDynamic = DropDownDynamic;
            ViewBag.dynamicLoadPartialController = DynamicLoadPartialController;
		} 

		#endregion
		
		#region View tapping
		/// <summary>
        /// Always tap once before going into the view.
        /// </summary>
        /// <param name="view">Say the view state, where it is calling from.</param>
        /// <param name="feedback">Gives the model if it is a editing state or creating posting state or when deleting.</param>
        /// <returns>If successfully saved returns true or else false.</returns>
		bool ViewTapping(ViewStates view, Feedback feedback = null, bool entityValidState = true){
			switch (view){
				case ViewStates.Index:
					break;
				case ViewStates.Create:
					break;
				case ViewStates.CreatePostBefore: // before saving it
					break;
                case ViewStates.CreatePostAfter: // after saving
					break;
				case ViewStates.Edit:
					break;
				case ViewStates.Details:
					break;
				case ViewStates.EditPostBefore: // before saving it
					break;
                case ViewStates.EditPostAfter: // after saving
					break;
				case ViewStates.Delete:
					break;
			}
			return true;
		}
		#endregion

		#region Save database common method

		/// <summary>
        /// Better approach to save things into database(than db.SaveChanges()) for this controller.
        /// </summary>
        /// <param name="view">Say the view state, where it is calling from.</param>
        /// <param name="feedback">Your model information to send in email to developer when failed to save.</param>
        /// <returns>If successfully saved returns true or else false.</returns>
		bool SaveDatabase(ViewStates view, Feedback feedback = null){
			// working those at HttpPost time.
			switch (view){
				case ViewStates.Create:
					break;
				case ViewStates.Edit:
					break;
				case ViewStates.Delete:
					break;
			}

			try	{                
				var changes = db.SaveChanges(feedback);
				if(changes > 0){
                    RemoveOutputCacheOnIndex();
                    RemoveOutputCache(CurrentControllerRemoveOutputCacheUrl);
					return true;
				}
			} catch (Exception ex){
				 throw new Exception("Message : " + ex.Message.ToString() + " Inner Message : " + ex.InnerException.Message.ToString());
			}
			return false;
		}
		#endregion

		#region DropDowns Generate

        #region FeedbacksController : DropDowns to paste into the partial
            
        #endregion

		public void GetDropDowns(Feedback feedback = null){
			
		}

		public void GetDropDowns(long id){			
		}
		#endregion

        private ActionResult GetPagedFeedbacks(Expression<Func<Feedback, bool>> condition, string actionName, int? page = 1) {
            var paginationInfo = new PaginationInfo() {
                ItemsInPage = AppVar.Setting.PageItems,
                PageNumber = page,
                PagesExists = null
            };
            string cacheName = "admin.feedback." + actionName;
            var feedbacks = db.Feedbacks
                               .Where(condition)
                               .OrderByDescending(n=> n.FeedbackID); // pagnation only work with order by

            var pagedData = feedbacks.GetPageData(paginationInfo, cacheName: cacheName);
                            
            var url = ControllerVisibleUrl + actionName + "/@page";
            ViewBag.paginationHtml = Pagination.GetList(paginationInfo, url, cacheName: cacheName + ".nav.html");
            return View("Index", pagedData);
        }

		#region Index
        [OutputCache(CacheProfile = "Year")]
        public ActionResult Index(int? page) {
            bool viewOf = ViewTapping(ViewStates.Index);
            var action = System.Reflection.MethodBase.GetCurrentMethod().Name.ToString();

            return GetPagedFeedbacks(n => !n.IsViewed, action, page);
        }

        public ActionResult UnSolved(int? page) {
            var action = System.Reflection.MethodBase.GetCurrentMethod().Name.ToString();
            return GetPagedFeedbacks(n => n.IsUnSolved, action, page);
        }

        public ActionResult IsInProcess(int? page) {
            var action = System.Reflection.MethodBase.GetCurrentMethod().Name.ToString();
            return GetPagedFeedbacks(n => n.IsInProcess, action, page);
        }

        public ActionResult Solved(int? page) {
            var action = System.Reflection.MethodBase.GetCurrentMethod().Name.ToString();
            return GetPagedFeedbacks(n => n.IsSolved, action, page);
        }
    
		#endregion

		#region Index Find - Commented
		/*
        [OutputCache(CacheProfile = "Year")]
        public ActionResult Index(System.long id) {
			bool viewOf = ViewTapping(ViewStates.Index);
            return View(db.Feedbacks.Where(n=> n. == id).ToList());
        }
		*/
		#endregion

		#region Details
        public ActionResult Details(long id) {
        
            if (id == null) {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            var feedback = db.Feedbacks.Find(id);
            if (feedback == null)
            {
                return HttpNotFound();
            }
			bool viewOf = ViewTapping(ViewStates.Details, feedback);
            return View(feedback);
        }
		#endregion

	

        #region Edit or modify record
        public ActionResult Reply(long id) {
        
            if (id == null) {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            var feedback = db.Feedbacks.Find(id);
            if (feedback == null)
            {
                return HttpNotFound();
            }
			bool viewOf = ViewTapping(ViewStates.Edit, feedback);
			if(DropDownDynamic == false){
                GetDropDowns(feedback); // Generating drop downs
            }
            return View(feedback);
        }

        
        
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Reply(Feedback feedback) {
			bool viewOf = ViewTapping(ViewStates.EditPostBefore, feedback);
            if (ModelState.IsValid)
            {
                db.Entry(feedback).State = EntityState.Modified;
                bool state = SaveDatabase(ViewStates.Edit, feedback);
				if (state) {
                    AppVar.SetSavedStatus(ViewBag, EditedSaved); // Saved Successfully.
				} else {					
					AppVar.SetErrorStatus(ViewBag, EditedError); // Failed to Save
				}
				
                viewOf = ViewTapping(ViewStates.EditPostAfter, feedback , state);
                return RedirectToAction("Index");
            }
            viewOf = ViewTapping(ViewStates.EditPostAfter, feedback , false);
        	if(DropDownDynamic == false){
                GetDropDowns(feedback); // Generating drop downs
            }
            AppVar.SetErrorStatus(ViewBag, EditedError); // record not valid for save
            return View(feedback);
        }
		#endregion


		#region Removing output cache
		public void RemoveOutputCache(string url) {
			HttpResponse.RemoveOutputCacheItem(url);
		}
        
        public void RemoveOutputCacheOnIndex() {
            var cacheManager = new OutputCacheManager();
            cacheManager.RemoveItems(ControllerName, "Index");
            cacheManager.RemoveItems(ControllerName, "List");
            RemoveOutputCache(ControllerVisibleUrl);
            RemoveOutputCache(ControllerVisibleUrl + "Index");
            cacheManager = null;
            GC.Collect();
        }
		#endregion
    }

	
}
