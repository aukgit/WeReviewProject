using System;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Web.Mvc;
using WereViewApp.Controllers;
using WereViewApp.Models.POCO.IdentityCustomization;

namespace WereViewApp.Areas.Admin.Controllers {
    public class FeedbacksController : BasicController {
        // Generated by Alim Ul Karim on behalf of Developers Organism.
        // Find us developers-organism.com
        // https://www.facebook.com/DevelopersOrganism
        // mailto:info@developers-organism.com

        public FeedbacksController()
            : base(true) {
        }

        public void GetDropDowns() {
        }

        public ActionResult Index() {
            return View("Index", db.Feedbacks.Where(n => !n.IsViewed).ToList());
        }

        public ActionResult UnSolved() {
            return View("Index", db.Feedbacks.Where(n => n.IsUnSolved).ToList());
        }

        public ActionResult IsInProcess() {
            return View("Index", db.Feedbacks.Where(n => n.IsSolved).ToList());
        }

        public ActionResult Solved() {
            return View("Index", db.Feedbacks.Where(n => n.IsSolved).ToList());
        }

        public ActionResult Details(Int64 id) {
            if (id == null) {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            var feedback = db.Feedbacks.Find(id);
            if (feedback == null) {
                return HttpNotFound();
            }
            return View(feedback);
        }

        public ActionResult Edit(Int64 id) {
            if (id == null) {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            var feedback = db.Feedbacks.Find(id);
            if (feedback == null) {
                return HttpNotFound();
            }
            GetDropDowns();
            return View(feedback);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit(Feedback feedback) {
            GetDropDowns();
            if (ModelState.IsValid) {
                db.Entry(feedback).State = EntityState.Modified;
                feedback.IsSolved = true;
                feedback.IsUnSolved = false;
                feedback.IsViewed = true;
                feedback.IsInProcess = false;
                db.SaveChanges();
                return RedirectToAction("Index");
            }

            AppVar.SetErrorStatus(ViewBag);
            return View(feedback);
        }

        public ActionResult Delete(long id) {
            var feedback = db.Feedbacks.Find(id);
            db.Feedbacks.Remove(feedback);
            db.SaveChanges();
            return RedirectToAction("Index");
        }
    }
}